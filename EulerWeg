import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class Eulerweg {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        int hasNeighbour = 0;

        for (int i = 0; i < t; i++) {   
        	final int NumVertice = 677;

        int[] outDeg = new int[NumVertice];
        int[] inDeg = new int[NumVertice];
        String[] counterString = new String[NumVertice];
        ArrayList<ArrayList<Integer>> inG = new ArrayList<ArrayList<Integer>>();
        ArrayList<ArrayList<Integer>> outG = new ArrayList<ArrayList<Integer>>();
    	
        int countOutIndex;
        int countInIndex;

            for (int k = 0; k < NumVertice; k++) {
            	inG.add(new ArrayList<Integer>());
               	outG.add(new ArrayList<Integer>());
            }
        	       	
            for(int p =0; p<NumVertice; p++){
                outDeg[p] = 0;
                inDeg[p] = 0;
                counterString[p]="abc";
            }
            int n = sc.nextInt();
            String[] paper = new String[n];
            String[] pre = new String[n];
            String[] pro = new String[n];

            for (int j = 0; j < n; j++) {
                paper[j] = sc.next();
                pre[j] = paper[j].substring(0, 2);
                pro[j] = paper[j].substring(1, 3);
                // input all the papers. generate pre== first two characters
                // pro== last two characters
                countOutIndex = (pre[j].toCharArray()[1]-'a')+26*(pre[j].toCharArray()[0]-'a');
                countInIndex = (pro[j].toCharArray()[1]-'a')+26*(pro[j].toCharArray()[0]-'a');
//                System.out.println(countOutIndex+ " " +countInIndex);
                inG.get(countOutIndex).add(countInIndex);
                outG.get(countInIndex).add(countOutIndex);
                   hasNeighbour = countOutIndex;
                outDeg[countOutIndex]++;
                counterString[countOutIndex] = paper[j];
                inDeg[countInIndex]++;
                counterString[countInIndex] = paper[j];
            }
         

            LinkedList<Integer> q = new LinkedList<Integer>();
            boolean[] visited = new boolean[inG.size()];
            boolean[] active = new boolean[inG.size()];

            // We need to use a starting point v (BFS root) with deg(v) != 0, hence we use sampleChar
            // We can start at any vertex with nonzero degree because here we are assuming that the graph has
            // an euler cycle, hence it should only have one cyclic connected component
            q.add(inG.get(hasNeighbour).get(0));

            while (!q.isEmpty()) {
                int w = q.poll();
                visited[w] = true;
                for (int x : inG.get(w)) {
                    if (!visited[x] && !active[x]) {
                        active[x] = true;
                        
                        q.add(x);
                      
                    }
                  
                }
                for (int x : outG.get(w)) {
                    if (!visited[x] && !active[x]) {
                        active[x] = true;
                        q.add(x);
                      
                    }
                }
            }

            // Check if all vertices with nonzero degree were visited
          
            boolean connected = true;
            
            for (int e = 0; e < visited.length; e++) {
                if (!visited[e]&&!inG.get(e).isEmpty()) {
                    System.out.println("no");
                    connected = false;
                    break;
                }
            }          
            if (!connected) continue;           
            System.out.println(isEulerWeg(NumVertice, inDeg, outDeg, pre, pro,counterString,inG,outG));
        }
        sc.close();
    }

	public static String isEulerWeg(int NumVertice, int[] inDeg, int[] outDeg, 
			String[] pre, String[] pro,String[] counterString, 
			ArrayList<ArrayList<Integer>> inG,ArrayList<ArrayList<Integer>> outG) {

		int counter = 0;
		ArrayList<Integer> indexOfUnevenVertice = new ArrayList<Integer>();
		boolean allEqual = true;
		boolean littleBitch = true;
		int size = pre.length;

		if (size == 1) {
			return "yes";
		}//correct
		
		for (int p = 0; p < size - 1; p++) {
			if (!pre[p].equals(pro[p]) || !pre[p].equals(pre[p + 1])) {
				littleBitch = false;
			}

		
		}//if aaa aaa, correct	
		if (littleBitch) {
				return "yes";
			}


		/*
		 * test connectivity using BFS
		 */

		for (int p = 0; p < NumVertice; p++) {

			if (inDeg[p] == outDeg[p]) {

				if (inG.get(p).size() == 1 && outG.get(p).size() == 1) {
					if (inG.get(p).get(0) == outG.get(p).get(0)) {
						return "no";
					}
				}
			} else if (inDeg[p] != outDeg[p]) {
				if (inDeg[p] - outDeg[p] == 1 || inDeg[p] - outDeg[p] == -1) {
					counter++;
					indexOfUnevenVertice.add(p);
					if (counter > 2) {
						// System.out.println("here2");
						return "no";
						/*
						 * if there are more than two vertices which
						 * |inDeg-outDeg|=1, then there is no Eulerweg
						 */
					}
				} else {
					return "no";
				}
			}
		}

		if (counter == 0) {
			return "yes";
		} else if (counter == 1) {
			return "no";
		} else {
			int x = indexOfUnevenVertice.get(0);
			int y = indexOfUnevenVertice.get(1);

			
			if ((inDeg[x] > outDeg[x] && inDeg[y] < outDeg[y]) || (inDeg[x] < outDeg[x] && inDeg[y] > outDeg[y])) {
				
				return "yes";
			} else {
				return "no";
			}

		}
	}
}
