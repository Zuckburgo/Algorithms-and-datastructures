import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.Scanner;

public class RouletteMonteCarlo {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		Random r = new Random();

		int t = s.nextInt();

		for (int i = 0; i < t; i++) {
			int numSlots = s.nextInt();
			int m = s.nextInt();
			int k = s.nextInt();

			int numZeros = 0;
			int[] slots = new int[numSlots];
			for (int j = 0; j < numSlots; j++) {
				int temp = s.nextInt();
				if (temp == 0) {
					numZeros++;
				}
				slots[j] = temp;
			}

			double p_zeros = (double) numZeros / (double) numSlots;

			int[] testArray = new int[m];
			int numWin = 0;

			for (int w = 0; w < 1999999999; w++) {
				// gemerate a ramdom number, to simulate and generate a
				// testArray
				for (int z = 0; z < m; z++) {
					if (r.nextInt(numSlots) < p_zeros * numSlots) {
						testArray[z] = 0;
					} else {
						testArray[z] = 1;
					}
				}

				// detect if there is a k-series in testArray or not
				int continuous_Zeros = 0;
				for (int z = 0; z < m; z++) {
					if (testArray[z] == 0) {
						continuous_Zeros++;
					}

					if (continuous_Zeros == k) {
						numWin++;
						break;
					}

					if (testArray[z] == 1) {
						continuous_Zeros = 0;
					}
				}

			}

			double Pr = (double) numWin / (double) 1999999999;

			DecimalFormat df = new DecimalFormat("0.0######");
			df.setRoundingMode(RoundingMode.HALF_DOWN);
			System.out.println(df.format(Pr));

		}

		s.close();
	}
}
